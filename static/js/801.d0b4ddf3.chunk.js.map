{"version":3,"file":"static/js/801.d0b4ddf3.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactFrom/ContactForm.module.css?c1a8","components/ContactFrom/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/App/App.module.css?583a","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__bNqot\",\"label\":\"ContactForm_label__Eci-k\",\"contactFormBtn\":\"ContactForm_contactFormBtn__1vy6T\",\"contactFormInput\":\"ContactForm_contactFormInput__Q35jK\"};","import React from 'react';\n// import PropTypes from 'prop-types';\nimport css from 'components/ContactFrom/ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number) => {\n    const alreadyAddedContact = contacts.find(contact => name === contact.name);\n    if (alreadyAddedContact) {\n      toast.error(`${alreadyAddedContact.name} is already in contacts`);\n      // alert(`${alreadyAddedContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    reset();\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleFormSubmit}>\n      <label className={css.label}>\n        Name{' '}\n        <input\n          className={css.contactFormInput}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={css.label}>\n        Number{' '}\n        <input\n          className={css.contactFormInput}\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Phone number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={css.contactFormBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"contactListBtn\":\"ContactList_contactListBtn__iwQAv\",\"ContactListText\":\"ContactList_ContactListText__Fqzb4\"};","// import PropTypes from 'prop-types';\nimport css from 'components/ContactList/ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n  const getVisibleContacts = contacts => {\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return visibleContacts;\n  };\n\n  const visibleContacts = getVisibleContacts(contacts);\n\n  return (\n    <ul className={css.contactList}>\n      {visibleContacts.map(contact => (\n        <li className={css.contactListItem} key={contact.id}>\n          <p className={css.ContactListText}>\n            {contact.name}: {contact.number}\n          </p>\n          <button\n            className={css.contactListBtn}\n            type=\"button\"\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.exact({\n//       id: PropTypes.string,\n//       name: PropTypes.string,\n//       number: PropTypes.string,\n//     })\n//   ),\n//   onDeleteContact: PropTypes.func,\n// };\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\",\"filter__label\":\"Filter_filter__label__ttfPR\"};","import PropTypes from 'prop-types';\nimport css from 'components/Filter/Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <label className={css.filter__label}>\n      Find contacts by name{' '}\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n      />{' '}\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container__title\":\"App_container__title__pDBfu\",\"container__loading\":\"App_container__loading__cOlhg\"};","import { ContactForm } from 'components/ContactFrom/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport css from 'components/App/App.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h2 className={css.container__title}>Phonebook</h2>\n      <ContactForm />\n      <h2 className={css.container__title}>Contacts</h2>\n      <Filter />\n      {isLoading && !error && (\n        <b className={css.container__loading}> Loading your contacts...</b>\n      )}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","handleChange","e","currentTarget","value","className","css","onSubmit","event","preventDefault","alreadyAddedContact","find","contact","toast","addContact","onChange","type","placeholder","pattern","title","required","filter","visibleContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","onClick","contactId","id","deleteContact","setFilter","isLoading","error","useEffect","fetchContacts"],"sourceRoot":""}